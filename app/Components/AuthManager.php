<?php


namespace App\Components;


use App\Components\rbac\Assignment;
use App\Components\rbac\BaseManager;
use App\Components\rbac\Item;
use App\Components\rbac\Permission;
use App\Components\rbac\Role;
use Hyperf\DbConnection\Db;
use Hyperf\Di\Annotation\Inject;
use Hyperf\Utils\Context;
use Psr\Container\ContainerInterface;
use yii\db\Query;

/**
 * Class AuthManager
 *
 * @author: TOOM <1023150697@qq.com>
 */
class AuthManager extends BaseManager
{

    public function removeAllAssignments()
    {
        // TODO: Implement removeAllAssignments() method.
    }

    public function removeAll()
    {
        // TODO: Implement removeAll() method.
    }
    public function removeAllPermissions()
    {
        // TODO: Implement removeAllPermissions() method.
    }

    public function removeAllRoles()
    {
        // TODO: Implement removeAllRoles() method.
    }
    public function removeAllRules()
    {
        // TODO: Implement removeAllRules() method.
    }
    public function removeRule($rule)
    {
        // TODO: Implement removeRule() method.
    }
    public function update($name, $object)
    {
        return parent::update($name,
            $object); // TODO: Change the autogenerated stub
    }
    public function updateItem($name, $item)
    {
        // TODO: Implement updateItem() method.
    }
    public function updateRule($name, $rule)
    {
        // TODO: Implement updateRule() method.
    }

    public function getUserIdsByRole($roleName)
    {
        // TODO: Implement getUserIdsByRole() method.
    }

    public function getPermissionsByUser($userId)
    {
        // TODO: Implement getPermissionsByUser() method.
    }
    public function getRules()
    {
        // TODO: Implement getRules() method.
    }

    public function getDefaultRoleInstances()
    {
        return parent::getDefaultRoleInstances(); // TODO: Change the autogenerated stub
    }
    public function getDefaultRoles()
    {
        return parent::getDefaultRoles(); // TODO: Change the autogenerated stub
    }
    public function setDefaultRoles($roles)
    {
        parent::setDefaultRoles($roles); // TODO: Change the autogenerated stub
    }
    public function revoke($role, $userId)
    {
        // TODO: Implement revoke() method.
    }
    public function revokeAll($userId)
    {
        // TODO: Implement revokeAll() method.
    }
    public function getChildRoles($roleName)
    {
        // TODO: Implement getChildRoles() method.
    }
    public function getPermissions()
    {
        return parent::getPermissions(); // TODO: Change the autogenerated stub
    }
    public function getPermissionsByRole($roleName)
    {
        // TODO: Implement getPermissionsByRole() method.
    }
    public function getItems($type)
    {
        // TODO: Implement getItems() method.
    }
    public function assign($role, $userId)
    {
        // TODO: Implement assign() method.
    }
    public function canAddChild($parent, $child)
    {
        // TODO: Implement canAddChild() method.
    }
    public function getChildren($name)
    {
        // TODO: Implement getChildren() method.
    }
    public function getAssignment($roleName, $userId)
    {
        // TODO: Implement getAssignment() method.
    }

    /**
     * @Inject
     * @var ContainerInterface
     */
    protected $container;

    /**
     * 用来存储用户角色
     * @var
     */
    private $assignment;

    /**
     * @\Hyperf\Di\Annotation\Inject()
     * @var \Psr\SimpleCache\CacheInterface
     */
    private $cache;

    public $application;

    /**
     * @var string the key used to store RBAC data in cache
     * @see cache
     * @since 2.0.3
     */
    public $cacheKey = 'rbac';

    /**
     * 全局的items
     * @var
     */
    public $items;

    /**
     * @var
     */
    public $rules;

    /**
     * @var
     */
    public $parents;

    /**
     * @var mixed
     */
    protected $defaultRoles;


    private $dependency = 'AuthManager';

    public function __construct()
    {
        $this->defaultRoles = config('authManager.defaultRoles');
        Context::set('_checkAccessAssignments', null);
        Context::set('_cache', $this->container->get(\Psr\SimpleCache\CacheInterface::class));
        Context::set('_rules', null);
        Context::set('_parents', null);

    }


    /**
     *
     *
     * @param         $userId
     * @param         $permissionName
     * @param  array  $params
     *
     * @return bool|mixed
     * @throws \Psr\SimpleCache\InvalidArgumentException
     */
    public function checkAccess($userId, $permissionName, $params = [])
    {
        if (isset($this->assignment[(string) $userId])) {
            $assignments = $this->assignment[(string) $userId];
        } else {
            $assignments = $this->getAssignments($userId);
            $this->assignment[$userId] = $assignments;
        }

        //如果是没有角色的用户, 并且没有设置默认的角色 则验证不通过
        if ($this->hasNoAssignments($assignments)) {
            return false;
        }

        $this->loadFromCache();

        if ($this->items !== null) {
            return $this->checkAccessFromCache($userId, $permissionName, $params, $assignments);
        }

        throw new \RuntimeException('GET AN ERROR');

//        return $this->checkAccessRecursive($userId, $permissionName, $params, $assignments);
    }

    /**
     * ###### 未作缓存 ######
     * 获取当前用户的角色
     *
     * @param $userId
     *
     * @return array
     */
    public function getAssignments($userId)
    {
        if (isset($this->assignment[$userId])) {
            return $this->assignment[$userId];
        }

        if ($this->isEmptyUserId($userId)) {
            return [];
        }

        if ($query = $this->cache->get('assignment')) {
            return $query;
        }

        //TODO 存入REDIS缓存
        $query = Db::table(config('authManager.assignmentTable'))
            ->where('user_id', (string) $userId);

        $assignments = [];
        foreach ($query->get() as $row) {
            $assignmentsModel = new Assignment();
            $assignmentsModel->userId = $row->user_id;
            $assignmentsModel->roleName = $row->item_name;
            $assignmentsModel->createdAt = $row->created_at;
            $assignments[$row->item_name] = $assignmentsModel;
        }
        if ($assignments) {
            $this->cache->set('assignment', $assignments);
        }
        return $assignments;
    }


    /**
     * Check whether $userId is empty.
     * @param mixed $userId
     * @return bool
     * @since 2.0.26
     */
    protected function isEmptyUserId($userId)
    {
        return !isset($userId) || $userId === '';
    }

    /**
     *
     *
     * @param $user
     * @param $itemName
     * @param $params
     * @param $assignments
     *
     * @return bool
     */
    protected function checkAccessFromCache($user, $itemName, $params, $assignments)
    {
        //判断缓存中是否有数据
        if (!isset($this->items[$itemName])) {
            return false;
        }

        $item = $this->items[$itemName];


        //执行规则
        if (!$this->executeRule($user, $item, $params)) {
            return false;
        }

        if (isset($this->parents[$itemName])) {
            $route = $this->parents[$itemName];
            foreach ($route as $parent) {
                if (isset($assignments[$parent])) {
                    return true;
                }
            }

        }
        return false;
    }

    /**
     * 对指定用户执行访问检查。
     * Performs access check for the specified user.
     * This method is internally called by [[checkAccess()]].
     * @param string|int $user the user ID. This should can be either an integer or a string representing
     * the unique identifier of a user. See [[\yii\web\User::id]].
     * @param string $itemName the name of the operation that need access check
     * @param array $params name-value pairs that would be passed to rules associated
     * with the tasks and roles assigned to the user. A param with name 'user' is added to this array,
     * which holds the value of `$userId`.
     * @param Assignment[] $assignments the assignments to the specified user
     * @return bool whether the operations can be performed by the user.
     */
    protected function checkAccessRecursive($user, $itemName, $params, $assignments)
    {
        if (($item = $this->getItem($itemName)) === null) {
            return false;
        }

        if (!$this->executeRule($user, $item, $params)) {
            return false;
        }

        if (isset($assignments[$itemName]) || in_array($itemName, $this->defaultRoles)) {
            return true;
        }

        $query = new Query();
        $parents = $query->select(['parent'])
            ->from($this->itemChildTable)
            ->where(['child' => $itemName, 'application' => Yii::$app->id])
            ->column($this->db);

        foreach ($parents as $parent) {
            if ($this->checkAccessRecursive($user, $parent, $params, $assignments)) {
                return true;
            }
        }
        return false;
    }

    /**
     * {@inheritdoc}
     */
    protected function addItem($item)
    {
        $time = time();
        if ($item->createdAt === null) {
            $item->createdAt = $time;
        }
        if ($item->updatedAt === null) {
            $item->updatedAt = $time;
        }

        $this->db->createCommand()
            ->insert($this->itemTable, [
                'name' => $item->name,
                'type' => $item->type,
                'description' => $item->description,
                'rule_name' => $item->ruleName,
                'data' => $item->data === null ? null : serialize($item->data),
                'created_at' => $item->createdAt,
                'updated_at' => $item->updatedAt,
                'parent' => $item->parent ?? null,
                'application' => $item->application ?? null
            ])->execute();

        $this->invalidateCache();

        return true;
    }

    /**
     * 删除一个角色或路由
     * @param  \yii\rbac\Permission|\yii\rbac\Role|Rule  $object
     *
     * @return bool
     * @throws \Exception
     */
    public function remove($object)
    {
        if ($object instanceof Item) {
            return $this->removeItem($object);
        } elseif ($object instanceof Rule) {
            return $this->removeRule($object);
        }

        throw new InvalidArgumentException('Removing unsupported object type.');
    }

    /**
     * 删除一个权限或者角色
     * {@inheritdoc}
     */
    protected function removeItem($item)
    {
        if (!$this->supportsCascadeUpdate()) {
            //删除角色
            $this->db->createCommand()
                ->delete($this->itemChildTable, ['or', '[[parent]]=:name', '[[child]]=:name'], [':name' => $item->name])
                ->execute();
            //删除用户对角色的分配
            $this->db->createCommand()
                ->delete($this->assignmentTable, ['item_name' => $item->name])
                ->execute();
        }
        //删除角色对应的权限
        $this->db->createCommand()
            ->delete($this->itemTable, ['name' => $item->name])
            ->execute();

        //刷新缓存
        $this->invalidateCache();

        return true;
    }

    /**
     * {@inheritdoc}
     */
    protected function addRule($rule)
    {
        $time = time();
        if ($rule->createdAt === null) {
            $rule->createdAt = $time;
        }
        if ($rule->updatedAt === null) {
            $rule->updatedAt = $time;
        }

        if (!class_exists($rule->name)) {
            throw new InvalidArgumentException("错误的规则类名");
        }

        $this->db->createCommand()
            ->insert($this->ruleTable, [
                'name' => $rule->name,
                'data' => serialize($rule),
                'created_at' => $rule->createdAt,
                'updated_at' => $rule->updatedAt,
                'description' => $rule->description,
            ])->execute();

        $this->invalidateCache();

        return true;
    }

    /**
     *
     *
     * @param $row
     *
     * @return mixed
     */
    protected function populateItem($row)
    {
        $class = $row->type == Item::TYPE_PERMISSION ? Permission::class : Role::class;
        if (!isset($row->data) || ($data = @unserialize(is_resource($row->data) ? stream_get_contents($row->data) : $row->data)) === false) {
            $data = null;
        }

        return new $class([
            'name' => $row->name,
            'type' => $row->type,
            'description' => $row->description,
            'ruleName' => $row->rule_name ?: null,
            'application' => $row->application,
            'data' => $data,
            'createdAt' => $row->created_at,
            'updatedAt' => $row->updated_at,
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function addChild($parent, $child)
    {

        if ($parent->name === $child->name) {
            throw new InvalidArgumentException("Cannot add '{$parent->name}' as a child of itself.");
        }

        if ($parent instanceof Permission && $child instanceof Role) {
            throw new InvalidArgumentException('Cannot add a role as a child of a permission.');
        }

        //        if ($this->detectLoop($parent, $child)) {
        //            throw new InvalidCallException("Cannot add '{$child->name}' as a child of '{$parent->name}'. A loop has been detected.");
        //        }

        $this->db->createCommand()
            ->insert($this->itemChildTable, ['parent' => $parent->name, 'child' => $child->name, 'application' => $child->application])
            ->execute();

        $this->invalidateCache();

        return true;
    }

    /**
     * 加载RBAC数据
     *
     * @param $reload
     *
     * @throws \Psr\SimpleCache\InvalidArgumentException
     */
    public function loadFromCache($reload = false)
    {
        if ($this->items !== null && $this->rules !== null && $this->parents !== null && $reload === false) {
            return;
        }

        //重新获取一次缓存数据
        $data = $this->cache->get($this->cacheKey);
        if (is_array($data) && isset($data[0], $data[1], $data[2]) && $reload === false) {
            [$items, $rules, $parents] = $data;
            $this->items = $items;
            $this->rules = $rules;
            $this->parents = $parents;
            return;
        }
        $tempArr = [];

        //item表
        //TODO REDIS缓存
        $query = Db::table(config('authManager.itemTable'));
        $this->items = [];
        foreach ($query->get() as $row) {
            $this->items[$row->name] = $this->populateItem($row);
        }

        //rule暂时没用上 先不管
        //TODO REDIS缓存
        $query = Db::table(config('authManager.ruleTable'));
        $this->rules = [];
        foreach ($query->get() as $row) {
            $data = $row->data;
            if (is_resource($data)) {
                $data = stream_get_contents($data);
            }
            $this->rules[$row->name] = unserialize($data);
        }

        //各个角色有的权限
        //TODO REDIS缓存
        $query = Db::table(config('authManager.itemChildTable'));
        $this->parents = [];
        foreach ($query->get() as $row) {
            if (isset($this->items[$row->child])) {
                $this->parents[$row->child][] = $row->parent;
            }
        }
        $this->_setProperty('_parents', $tempArr);
        $this->cache->set($this->cacheKey, [$this->items, $this->rules, $this->parents]);
    }

    /**
     * 创建一个权限
     * @param  null  $name
     * @param  null  $description
     * @param  null  $rule_name
     * @param  null  $application
     * @param  null  $parent
     *
     * @throws \yii\db\Exception
     */
    public function createRoute($name = null, $description = null, $rule_name = null, $application = null, $parent = null)
    {
        Yii::$app->db->createCommand()->insert($this->itemTable, [
            'name' => $name,
            'type' => Item::TYPE_PERMISSION,
            'description' => $description,
            'rule_name' => $rule_name,
            'application' => $application ?? Yii::$app->id,
            'parent' => $parent,
        ])->execute();
    }

    /**
     * {@inheritdoc}
     */
    public function add($object)
    {
        $this->invalidateCache();
        if ($object instanceof \common\components\auth\Permission) {
            return $this->addItem($object);
        }
        if ($object instanceof Item) {

            if ($object->ruleName && $this->getRule($object->ruleName) === null) {
                $rule = \Yii::createObject($object->ruleName);
                $rule->name = $object->ruleName;
                $this->addRule($rule);
            }

            return $this->addItem($object);
        } elseif ($object instanceof Rule) {
            return $this->addRule($object);
        }

        throw new InvalidArgumentException('Adding unsupported object type.');
    }

    public function getRolesByUser($userId)
    {
        if ($this->isEmptyUserId($userId)) {
            return [];
        }

        $query = (new Query())->select('b.*')
            ->from(['a' => $this->assignmentTable, 'b' => $this->itemTable])
            ->where('{{a}}.[[item_name]]={{b}}.[[name]]')
            ->andWhere(['a.user_id' => (string) $userId])
            ->andWhere(['b.type' => \yii\rbac\Item::TYPE_ROLE]);

        //        $roles = $this->getDefaultRoleInstances();
        foreach ($query->all($this->db) as $row) {
            $roles[$row['name']] = $this->populateItem($row);
        }

        return $roles;
    }

    /**
     * @return array|\yii\rbac\Item[]|\yii\rbac\Role[]
     */
    public function getRoles()
    {
        $query = (new Query())->from($this->itemTable)
            ->where([
                'type' => Item::TYPE_ROLE
            ])->all();
        return $query;
    }

    /**
     * @param  string  $name
     *
     * @return array|bool|\yii\rbac\Item|\yii\rbac\Role|null
     */
    public function getRole($name)
    {
        $query = (new Query())->from($this->itemTable)
            ->where([
                'type' => Item::TYPE_ROLE,
                'name' => $name
            ])->one();

        if (!$query) {
            return false;
        }
        return $query;
    }

    /**
     * 取规则
     *
     * @param  string  $name
     *
     * @return rbac\Rule|mixed|null
     */
    public function getRule($name)
    {
        if ($this->rules !== null) {
            return isset($this->rules[$name]) ? $this->rules[$name] : null;
        }

        $row = (new Query())->select(['data'])
            ->from($this->ruleTable)
            ->where(['name' => $name])
            ->one($this->db);
        if ($row === false) {
            return null;
        }
        $data = $row['data'];
        if (is_resource($data)) {
            $data = stream_get_contents($data);
        }

        return unserialize($data);
    }

    /**
     * {@inheritdoc}
     */
    protected function getItem($name)
    {
        if (empty($name)) {
            return null;
        }

        if (!empty($this->items[$name])) {
            return $this->items[$name];
        }

        $row = (new Query())->from($this->itemTable)
            ->where(['name' => $name])
            ->one($this->db);

        if ($row === false) {
            return null;
        }

        return $this->populateItem($row);
    }

    public function removeChild($parent, $child)
    {
        // TODO: Implement removeChild() method.
    }

    public function removeChildren($parent)
    {
        // TODO: Implement removeChildren() method.
    }

    public function hasChild($parent, $child)
    {
        // TODO: Implement hasChild() method.
    }


    /**
     *
     *
     * @param  array  $assignments
     *
     * @return bool
     */
    protected function hasNoAssignments(array $assignments)
    {
        echo 12313213123123;
        var_dump($assignments);
        var_dump(config('authManager.defaultRoles'));
        return empty($assignments) && empty(config('authManager.defaultRoles'));
    }
}